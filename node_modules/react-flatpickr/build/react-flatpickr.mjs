var g = Object.defineProperty;
var m = (o, s, t) => s in o ? g(o, s, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[s] = t;
var c = (o, s, t) => m(o, typeof s != "symbol" ? s + "" : s, t);
import { jsx as u } from "react/jsx-runtime";
import { Component as k } from "react";
import n from "prop-types";
import v from "flatpickr";
const d = [
  "onChange",
  "onOpen",
  "onClose",
  "onMonthChange",
  "onYearChange",
  "onReady",
  "onValueUpdate",
  "onDayCreate"
], p = n.oneOfType([
  n.func,
  n.arrayOf(n.func)
]), O = [
  "onCreate",
  "onDestroy"
], y = n.func;
class C extends k {
  constructor() {
    super(...arguments);
    c(this, "createFlatpickrInstance", () => {
      let t = {
        onClose: () => {
          this.node.blur && this.node.blur();
        },
        ...this.props.options
      };
      t = f(t, this.props), this.flatpickr = v(this.node, t), this.props.hasOwnProperty("value") && this.flatpickr.setDate(this.props.value, !1);
      const { onCreate: e } = this.props;
      e && e(this.flatpickr);
    });
    c(this, "destroyFlatpickrInstance", () => {
      const { onDestroy: t } = this.props;
      t && t(this.flatpickr), this.flatpickr && this.flatpickr.destroy(), this.flatpickr = null;
    });
    c(this, "handleNodeChange", (t) => {
      this.node = t, this.flatpickr && (this.destroyFlatpickrInstance(), this.createFlatpickrInstance());
    });
  }
  componentDidUpdate(t) {
    let { options: e } = this.props, l = t.options;
    e = f(e, this.props), l = f(l, t);
    const h = Object.getOwnPropertyNames(e);
    for (let i = h.length - 1; i >= 0; i--) {
      const r = h[i];
      let a = e[r];
      a.toString() !== l[r].toString() && (d.indexOf(r) !== -1 && !Array.isArray(a) && (a = [a]), this.flatpickr.set(r, a));
    }
    this.props.hasOwnProperty("value") && !(this.props.value && Array.isArray(this.props.value) && t.value && Array.isArray(t.value) && this.props.value.every((i, r) => {
      t[r];
    })) && this.props.value !== t.value && this.flatpickr.setDate(this.props.value, !1);
  }
  componentDidMount() {
    this.createFlatpickrInstance();
  }
  componentWillUnmount() {
    this.destroyFlatpickrInstance();
  }
  render() {
    const { options: t, defaultValue: e, value: l, children: h, render: i, ...r } = this.props;
    return d.forEach((a) => {
      delete r[a];
    }), O.forEach((a) => {
      delete r[a];
    }), i ? i({ ...r, defaultValue: e, value: l }, this.handleNodeChange) : t.wrap ? /* @__PURE__ */ u("div", { ...r, ref: this.handleNodeChange, children: h }) : /* @__PURE__ */ u("input", { ...r, defaultValue: e, ref: this.handleNodeChange });
  }
}
c(C, "propTypes", {
  defaultValue: n.string,
  options: n.object,
  onChange: p,
  onOpen: p,
  onClose: p,
  onMonthChange: p,
  onYearChange: p,
  onReady: p,
  onValueUpdate: p,
  onDayCreate: p,
  onCreate: y,
  onDestroy: y,
  value: n.oneOfType([
    n.string,
    n.array,
    n.object,
    n.number
  ]),
  children: n.node,
  className: n.string,
  render: n.func
}), c(C, "defaultProps", {
  options: {}
});
function f(o, s) {
  const t = { ...o };
  return d.forEach((e) => {
    if (s.hasOwnProperty(e)) {
      t[e] && !Array.isArray(t[e]) ? t[e] = [t[e]] : t[e] || (t[e] = []);
      const l = Array.isArray(s[e]) ? s[e] : [s[e]];
      t[e].push(...l);
    }
  }), t;
}
export {
  C as default
};
